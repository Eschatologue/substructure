sourceSets.main.java.srcDirs = ["src"]

ext{
    doExec = {cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])
        def dependencies = files.collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${projectName}Android.jar ${projectName}Desktop.jar")
    }
}

jar{
    archiveFileName = "${projectName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
    }

    from(project.projectDir){
        include "mod.json", "icon.png"
    }

    from("$projectDir/assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    
    archiveFileName = "${projectName}.jar"

    from{[zipTree("$buildDir/libs/${projectName}Desktop.jar"), zipTree("$buildDir/libs/${projectName}Android.jar")]}

    doLast{
        delete{delete "$buildDir/libs/${projectName}Desktop.jar"}
        delete{delete "$buildDir/libs/${projectName}Android.jar"}
    }
}
